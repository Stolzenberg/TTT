@using System
@inherits Sandbox.UI.Panel

@namespace Mountain

<root class="modal">
    <div class="container blur">
        <div class="death-info">
            <div class="victim-info">
                <h3>@GetVictimName()</h3>
                <h3>#WAS_KILLED</h3>
                <h3>Death since: @DamageInfo.TimeSinceEvent</h3>
            </div>

            <div class="role-info" style="color: @GetVictimTeam().GetColor().ToString();">
                <h3>@GetVictimTeam()</h3>
            </div>

            <div class="killer-info">
                @if (WasAttackerPlayer())
                {
                    @if (!string.IsNullOrEmpty(GetWeaponName()))
                    {
                        <div class="weapon">
                            <h3>#WEAPON:</h3>
                            <h3>#@GetWeaponName()</h3>
                        </div>
                    }

                    <div class="damage">
                        <h3>#DAMAGE:</h3>
                        <h3>@(DamageInfo.Damage.ToString("F0") ?? "0")</h3>
                    </div>

                    @if (GetDistanceToAttacker() > 0)
                    {
                        <div class="distance">
                            <h3>#DISTANCE: </h3>
                            <h3>@GetDistanceToAttacker().ToString("F0")m</h3>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(GetHitLocation()))
                    {
                        <div class="hitbox">
                            <h3>#HIT:</h3>
                            <h3>@GetHitLocation()</h3>
                        </div>
                    }
                }
                else
                {
                    <div class="environmental">
                        <h3>#CAUSE:</h3>
                        <h3>@GetDeathCause()</h3>
                    </div>

                    <div class="damage">
                        <h3>#DAMAGE:</h3>
                        <h3>@(DamageInfo.Damage.ToString("F0") ?? "0")</h3>
                    </div>
                }
            </div>
        </div>
    </div>
</root>

@code {
    public Action OnSubmit { get; set; }
    public DamageInfo DamageInfo { get; set; }

    public static void Show(DamageInfo damageInfo, Action submitAction = null)
    {
        var screenPanel = Game.ActiveScene.GetAllComponents<ModalRoot>().FirstOrDefault();

        if (!screenPanel.IsValid())
            return;

        var modal = screenPanel.Panel.AddChild<DeathInfoModal>();

        modal.DamageInfo = damageInfo;
        modal.OnSubmit = submitAction;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(DamageInfo);
    }

    private void OnSubmitButton()
    {
        OnSubmit.Invoke();
        Delete();
    }

    private string GetVictimName()
    {
        var victim = DamageInfo.Victim.GetPlayerFromComponent();

        return victim!.Client.DisplayName;
    }

    private Team GetVictimTeam()
    {
        var victim = DamageInfo.Victim.GetPlayerFromComponent();

        return victim!.Client.Team;
    }

    private string GetWeaponName()
    {
        if (!DamageInfo.Inflictor.IsValid())
        {
            return string.Empty;
        }

        // Try to get equipment name from the inflictor
        var equipment = DamageInfo.Inflictor.GetComponent<Equipment>();
        if (equipment?.Resource != null)
        {
            return (equipment.Resource.ResourceName ?? equipment.Resource.ToString()).ToUpper();
        }

        // Fallback to GameObject name or type
        var gameObjectName = DamageInfo.Inflictor.ToString();
        if (!string.IsNullOrEmpty(gameObjectName) && gameObjectName != "Object")
        {
            return gameObjectName.ToUpper();
        }

        return string.Empty;
    }

    private float GetDistanceToAttacker()
    {
        var attacker = DamageInfo.Attacker.GetPlayerFromComponent();
        var victim = DamageInfo.Victim.GetPlayerFromComponent();

        if (attacker != null && victim != null)
        {
            return attacker.WorldPosition.Distance(victim.WorldPosition);
        }

        return 0f;
    }

    private bool WasAttackerPlayer()
    {
        var attacker = DamageInfo.Attacker.GetPlayerFromComponent();

        return attacker != null;
    }

    private string GetHitLocation()
    {
        if (DamageInfo.Hitbox.HasFlag(HitboxTags.Head))
        {
            return "HEAD";
        }

        if (DamageInfo.Hitbox.HasFlag(HitboxTags.UpperBody))
        {
            return "UPPER_BODY";
        }

        if (DamageInfo.Hitbox.HasFlag(HitboxTags.LowerBody))
        {
            return "LOWER_BODY";
        }

        if (DamageInfo.Hitbox.HasFlag(HitboxTags.Leg))
        {
            return "LEG";
        }

        if (DamageInfo.Hitbox.HasFlag(HitboxTags.Arm))
        {
            return "ARM";
        }

        return string.Empty;
    }

    private string GetDeathCause()
    {
        if (DamageInfo.WasFallDamage)
        {
            return "Fall Damage";
        }

        if (DamageInfo.WasExplosion)
        {
            return "Explosion";
        }

        if (DamageInfo.WasMelee)
        {
            return "Melee Attack";
        }

        return "Environmental";
    }
}
