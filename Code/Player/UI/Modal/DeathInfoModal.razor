@using System
@inherits Sandbox.UI.Panel

@namespace Mountain

<root class="center">
    <div class="container blur rounded">
        <div class="death-info">
            <div class="victim-info">
                <h3>@LocalizationHelper.Resolve("#WAS_KILLED", GetVictimName())</h3>
                <h3>@LocalizationHelper.Resolve("#DEATH_SINCE", TimeSinceEvent.ToString("F0"))</h3>
            </div>

            <div class="role-info" style="color: @GetVictimTeam().GetColor().ToString();">
                <h3>@GetVictimTeam()</h3>
            </div>

            <div class="killer-info">
                @if (!string.IsNullOrEmpty(GetWeaponName()))
                {
                    <div class="weapon">
                        <h3>@LocalizationHelper.Resolve("#WAS_KILLED_BY_WEAPON", Language.GetPhrase(GetWeaponName()))</h3>
                    </div>
                }
            </div>
        </div>
    </div>
</root>

@code {
    public DamageInfo DamageInfo { get; set; }
    public Client VictimClient { get; set; }

    public double TimeSinceEvent { get; set; }

    public static void Show(DamageInfo damageInfo, Client client)
    {
        var screenPanel = Game.ActiveScene.GetAllComponents<ModalRoot>().FirstOrDefault();
        if (!screenPanel.IsValid())
        {
            return;
        }

        screenPanel.Panel.DeleteChildren(true);

        var modal = screenPanel.Panel.AddChild<DeathInfoModal>();

        modal.DamageInfo = damageInfo;
        modal.VictimClient = client;
    }
    
    public static void Close()
    {
        var screenPanel = Game.ActiveScene.GetAllComponents<ModalRoot>().FirstOrDefault();
        if (!screenPanel.IsValid())
        {
            return;
        }
        
        var modal = screenPanel.Panel.Children.First(c => c is DeathInfoModal);
        modal.Delete();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(TimeSinceEvent);
    }

    public override void Tick()
    {
        TimeSinceEvent = (DateTime.UtcNow - DamageInfo.KilledAtUtc).TotalSeconds;
    }

    private string GetVictimName()
    {
        return VictimClient.DisplayName;
    }

    private Team GetVictimTeam()
    {
        return VictimClient.Team;
    }

    private string GetWeaponName()
    {
        if (!DamageInfo.Inflictor.IsValid())
        {
            return string.Empty;
        }

        // Try to get equipment name from the inflictor
        var equipment = DamageInfo.Inflictor.GetComponent<Equipment>();
        if (equipment?.Resource != null)
        {
            return (equipment.Resource.ResourceName ?? equipment.Resource.ToString()).ToUpper();
        }

        // Fallback to GameObject name or type
        var gameObjectName = DamageInfo.Inflictor.ToString();
        if (!string.IsNullOrEmpty(gameObjectName) && gameObjectName != "Object")
        {
            return gameObjectName.ToUpper();
        }

        return string.Empty;
    }
}
