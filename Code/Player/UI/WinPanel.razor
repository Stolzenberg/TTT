@using System
@using System.Linq
@inherits PanelComponent
@namespace Mountain

<root>
    <div class="win-container blur rounded">
        <div class="win-title" style="color: @GetWinningTeamColor()">
            @GetWinMessage()
        </div>

        <div class="scoreboard">
            <div class="scoreboard-title">#PLAYERS</div>
            <div class="players-list">
                @foreach (var client in GetAllPlayers().OrderBy(c => c.Team).ThenBy(c => c.DisplayName))
                {
                    <div class="player-row">
                        <div class="player-info">
                            <div class="player-name">@client.DisplayName</div>
                            <div class="player-team" style="background-color: @client.Team.GetColor(); color: white;">
                                @client.Team.ToString()
                            </div>
                        </div>
                        <div class="player-status @(IsPlayerAlive(client) ? "status-alive" : "status-dead")">
                            @(IsPlayerAlive(client) ? "ALIVE" : "DEAD")
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (GetRemainingTime() > 0)
        {
            <div class="next-round-timer">
                @if(GetRemainingTime() > 1) 
                {
                    <p>@LocalizationHelper.Resolve("#NEXT_ROUND_IN_SECONDS", GetRemainingTime().ToString("F0"))</p>
                }
                else 
                {
                    <p>#NEXT_ROUND_STARTS_NOW</p>
                }
            </div>
        }
    </div>
</root>

@code{
    [Property]
    public GameState InnocentWinState { get; set; }
    
    [Property]
    public GameState TraitorWinState { get; set; }

    private Team winningTeam;

    protected override void OnEnabled()
    {
        if (GameMode.Instance.StateMachine.CurrentState == InnocentWinState)
        {
            winningTeam = Team.Innocent;
        }
        else if (GameMode.Instance.StateMachine.CurrentState == TraitorWinState)
        {
            winningTeam = Team.Traitor;
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(winningTeam, GetRemainingTime());
    }

    private string GetWinMessage()
    {
        return "#" + winningTeam.ToString().ToUpper() + "_WIN_TITLE";
    }

    private string GetWinningTeamColor()
    {
        return winningTeam.GetColor().ToString();
    }

    private static IEnumerable<Client> GetAllPlayers()
    {
        return Game.ActiveScene.AllClients().Where(c => c.IsValid && !string.IsNullOrEmpty(c.DisplayName));
    }

    private static bool IsPlayerAlive(Client client)
    {
        var player = client.Player;
        if (!player.IsValid()) return false;

        return player.Components.TryGet<Health>(out var health) && health.State == LifeState.Alive;
    }

    private static float GetRemainingTime()
    {
        var currentState = GameMode.Instance.StateMachine.CurrentState;

        return currentState?.RemainingDuration ?? 0f;
    }

    private static string GetRemainingTimeLabel()
    {
        var remainingTime = GetRemainingTime();
        var seconds = (int)Math.Ceiling(remainingTime);

        return $"#NEXT_ROUND_IN {seconds} #SECONDS";
    }
}